
R version 3.3.3 (2017-03-06) -- "Another Canoe"
Copyright (C) 2017 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin16.4.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

[Previously saved workspace restored]

> # ------------------------------------------------------------------------------
> # Set up MC Experiments
> # Christopher Gandrud
> # MIT License
> # ------------------------------------------------------------------------------
> 
> setwd('~/Dropbox/dynsimRwriteUp/tlsl/mc_source/')
> 
> library(simpleSetup)
> pkgs <- c('spatialWeights', 'car', 'dplyr', 'Matrix', 'ggplot2', 'gridExtra')
> simpleSetup::library_install(pkgs)

Attaching package: ‘dplyr’

The following object is masked from ‘package:car’:

    recode

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union


Attaching package: ‘gridExtra’

The following object is masked from ‘package:dplyr’:

    combine

> 
> theme_set(theme_bw())
> 
> # Number of cores
> num_cores <- 7
> 
> #### TRUE VALUES
> # Number of simulations
> nsims = 1000
> 
> # Number of simulated observations
> N = 500
> 
> # Number of time points per unit
> t_per_indiv = 5
> 
> # Number of units
> n_indiv <- N / t_per_indiv
> 
> # Time points
> t <- rep(x = 1:t_per_indiv, n_indiv)
> 
> # Individuals
> i <- rep(1:n_indiv, times = 1, each = t_per_indiv)
> 
> # Regions
> regions <- 0:1
> nregions <- length(regions)
> 
> # Observations per time point
> obs_per_time <- N/t_per_indiv
> 
> # Parameters
> alpha = 1
> b1 = 2
> b2 = 3
> phi = 4
> 
> # AR
> AR = 0.6
> 
> #### FUNCTIONS
> # Function to randomly create a location variable
> location_builder <- function(n_indiv = n_indiv, t_per_indiv = t_per_indiv) {
+     location <- vector()
+     for (j in 1:n_indiv) {
+         temp <- rep(sample(0:1, 1), t_per_indiv)
+         location <- c(location, temp)
+     }
+     return(location)
+ }
> 
> # Function to extract standard errors from fitted model objects
> se <- function(x) summary(x)[["coefficients"]][, 2]
> 
> # Function to extract p-values from fitted model objects
> pv <- function(x) {
+     full <- summary(x)[["coefficients"]]
+     p <- full[, 'Pr(>|t|)']
+     return(p)
+ }
> 
> # Combine resluts from each simulation
> results_combiner <- function(l, m) {
+     l[['coefs']] <- c(l[['coefs']], coef(m))
+     l[['se']] <- c(l[['se']], se(m))
+     l[['pvalue']] <- c(l[['pvalue']], pv(m))
+     l[['vif']] <- c(l[['vif']], vif(m))
+ 
+     # Need Moran's I
+     # Need QI
+     return(l)
+ }
> 
> extract_element <- function(results, type, var) {
+     all <- results[[type]]
+     sub <- cbind(as.data.frame(all), vars = attributes(all)$names)
+     if (!missing(var)) sub <- subset(sub, vars == var)
+     names(sub) <- c('value', 'variable')
+     return(sub)
+ }
> 
> qi_slimmer <- function(df, scenario_var, qi_var){
+     qi_ <- scenario_ <- NULL
+ 
+     names(df)[names(df) == qi_var] <- 'qi_'
+     names(df)[names(df) == scenario_var] <- 'scenario_'
+ 
+     if (!(names(df)[[ncol(df)]] == 'scenario_'))
+         df$scenario_ <- interaction(df[, 1:(ncol(df)-1)], drop = TRUE)
+ 
+     df_out <- df %>% group_by(scenario_) %>%
+         summarise(qi_min = min(qi_),
+                   qi_median = median(qi_),
+                   qi_max = max(qi_)
+         ) %>%
+         data.frame
+ 
+     names(df_out)[names(df_out) == 'qi_'] <- qi_var
+     names(df_out)[names(df_out) == 'scenario_'] <- scenario_var
+     return(df_out)
+ }
> 
> slim_coefs <- function(results) {
+     coefs_raw <- extract_element(results, 'coefs')
+     coef_interval <- qi_slimmer(coefs_raw, scenario_var = 'variable',
+                                 qi_var = 'value')
+     coef_interval <- subset(coef_interval, variable != '(Intercept)')
+     return(coef_interval)
+ }
> 
> proc.time()
   user  system elapsed 
  1.828   0.152   2.129 
